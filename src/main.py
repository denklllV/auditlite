# src/main.py
# –ò–º—è —Ñ–∞–π–ª–∞: src/main.py

import sys
import os
import io
import json
from pathlib import Path
from dotenv import load_dotenv
from googleapiclient.http import MediaIoBaseDownload

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∏ –∏–º–ø–æ—Ä—Ç–æ–≤ ---
project_root = Path(__file__).resolve().parent.parent
sys.path.append(str(project_root))

from src.utils.google_clients import get_google_clients
from src.parsers.pdf_parser import extract_text_from_pdf
from src.analytics.llm_mapper import map_text_to_structured_data

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
SHEET_NAME = os.getenv("SHEET_NAME")
SHEET_WORKSHEET_NAME = os.getenv("SHEET_WORKSHEET_NAME")

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
def download_file_from_drive(drive_service: "Resource", file_id: str, save_path: Path) -> bool:
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try:
        print(f"‚¨áÔ∏è  –ù–∞—á–∏–Ω–∞—é —Å–∫–∞—á–∏–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ —Å ID: {file_id}")
        request = drive_service.files().get_media(fileId=file_id)
        save_path.parent.mkdir(parents=True, exist_ok=True)
        fh = io.FileIO(save_path, 'wb')
        downloader = MediaIoBaseDownload(fh, request)
        done = False
        while not done:
            status, done = downloader.next_chunk()
        print(f"‚úÖ –§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–∫–∞—á–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {save_path}")
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞: {e}")
        return False

def update_task_status(worksheet: "gspread.Worksheet", row_index: int, new_status: str):
    # ... (–∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try:
        status_col = worksheet.find('Status').col
        worksheet.update_cell(row_index, status_col, new_status)
        print(f"üîÑ –°—Ç–∞—Ç—É—Å –≤ —Å—Ç—Ä–æ–∫–µ {row_index} –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞ '{new_status}'")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

# --- –ò–ó–ú–ï–ù–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ü–û–ò–°–ö–ê ---
def find_next_task_by_status(worksheet: "gspread.Worksheet", status: str) -> dict | None:
    """
    –ù–∞—Ö–æ–¥–∏—Ç –ø–µ—Ä–≤—É—é —Å—Ç—Ä–æ–∫—É —Å –ó–ê–î–ê–ù–ù–´–ú —Å—Ç–∞—Ç—É—Å–æ–º.
    """
    print(f"üîé –ü–æ–∏—Å–∫ –∑–∞–¥–∞—á–∏ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º '{status}'...")
    all_records = worksheet.get_all_records()
    for index, row in enumerate(all_records):
        if row.get("Status") == status:
            row['row_index'] = index + 2
            print(f"  > –ù–∞–π–¥–µ–Ω–∞ –∑–∞–¥–∞—á–∞ –≤ —Å—Ç—Ä–æ–∫–µ {row['row_index']}")
            return row
    return None

# --- –ù–û–í–´–ï –§–£–ù–ö–¶–ò–ò-–û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –î–õ–Ø –ö–ê–ñ–î–û–ì–û –≠–¢–ê–ü–ê ---

def handle_text_extraction(task: dict, worksheet: "gspread.Worksheet", drive_service: "Resource"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≠—Ç–∞–ø–∞ 2: –°–∫–∞—á–∏–≤–∞–Ω–∏–µ –∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞."""
    print("\n--- üü¢ –≠—Ç–∞–ø 2: –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¢–µ–∫—Å—Ç–∞ ---")
    row_idx = task['row_index']
    update_task_status(worksheet, row_idx, 'processing_text')
    
    file_id = task.get('FileID')
    file_name = task.get('FileName', f"{file_id}.pdf")
    local_pdf_path = project_root / 'data' / 'artifacts' / file_name
    
    if not download_file_from_drive(drive_service, file_id, local_pdf_path):
        update_task_status(worksheet, row_idx, 'error_download_failed')
        return

    extracted_text = extract_text_from_pdf(local_pdf_path)
    artifact_path = local_pdf_path.with_suffix('.json')
    artifact_data = {"case_id": file_id, "source_file": file_name, "raw_text": extracted_text}
    
    with open(artifact_path, 'w', encoding='utf-8') as f:
        json.dump(artifact_data, f, ensure_ascii=False, indent=4)
    print(f"üìù –ê—Ä—Ç–µ—Ñ–∞–∫—Ç —Å —Ç–µ–∫—Å—Ç–æ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {artifact_path}")
    
    update_task_status(worksheet, row_idx, 'text_extracted')

def handle_llm_mapping(task: dict, worksheet: "gspread.Worksheet"):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≠—Ç–∞–ø–∞ 3: LLM –º–∞–ø–ø–∏–Ω–≥."""
    print("\n--- üîµ –≠—Ç–∞–ø 3: LLM –ú–∞–ø–ø–∏–Ω–≥ ---")
    row_idx = task['row_index']
    update_task_status(worksheet, row_idx, 'processing_llm')

    file_name = task.get('FileName')
    artifact_path = project_root / 'data' / 'artifacts' / Path(file_name).with_suffix('.json')

    if not artifact_path.exists():
        update_task_status(worksheet, row_idx, 'error_artifact_not_found')
        return

    with open(artifact_path, 'r', encoding='utf-8') as f:
        artifact_data = json.load(f)
    
    structured_items = map_text_to_structured_data(artifact_data.get("raw_text"))
    
    if structured_items is not None:
        # TODO: –°–æ—Ö—Ä–∞–Ω–∏—Ç—å structured_items –≤ –Ω–æ–≤—ã–π –∞—Ä—Ç–µ—Ñ–∞–∫—Ç
        print("--- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—Ç LLM ---")
        print(json.dumps(structured_items, indent=2, ensure_ascii=False))
        update_task_status(worksheet, row_idx, 'llm_mapped_successfully')
    else:
        update_task_status(worksheet, row_idx, 'error_llm_mapping_failed')

# --- –ì–õ–ê–í–ù–´–ô –û–†–ö–ï–°–¢–†–ê–¢–û–† ---
def main():
    print("üöÄ –ó–∞–ø—É—Å–∫ AuditLite Python Worker...")
    try:
        gs_client, drive_service = get_google_clients()
        spreadsheet = gs_client.open(SHEET_NAME)
        worksheet = spreadsheet.worksheet(SHEET_WORKSHEET_NAME)
        
        # --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ö–û–ù–í–ï–ô–ï–†–ê ---
        # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –≠—Ç–∞–ø–∞ 2
        task_for_extraction = find_next_task_by_status(worksheet, 'new')
        if task_for_extraction:
            handle_text_extraction(task_for_extraction, worksheet, drive_service)
            print("üèÅ –†–∞–±–æ—Ç–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω –≠—Ç–∞–ø 2).")
            return # –í—ã—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –ø—Ä–∏ —Å–ª–µ–¥—É—é—â–µ–º –∑–∞–ø—É—Å–∫–µ –Ω–∞—á–∞—Ç—å —Å–Ω–∞—á–∞–ª–∞

        # –ï—Å–ª–∏ –¥–ª—è –≠—Ç–∞–ø–∞ 2 –∑–∞–¥–∞—á –Ω–µ—Ç, –∏—â–µ–º –¥–ª—è –≠—Ç–∞–ø–∞ 3
        task_for_mapping = find_next_task_by_status(worksheet, 'text_extracted')
        if task_for_mapping:
            handle_llm_mapping(task_for_mapping, worksheet)
            print("üèÅ –†–∞–±–æ—Ç–∞ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ (–≤—ã–ø–æ–ª–Ω–µ–Ω –≠—Ç–∞–ø 3).")
            return

        print("‚úÖ –ù–µ—Ç –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á –Ω–∏ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∏–∑ —ç—Ç–∞–ø–æ–≤. –í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ.")

    except Exception as e:
        print(f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()

# –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞: src/main.py