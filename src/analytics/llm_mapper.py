# src/analytics/llm_mapper.py
# –ò–º—è —Ñ–∞–π–ª–∞: src/analytics/llm_mapper.py

import os
import json
import re # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª—å –¥–ª—è —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π
from huggingface_hub import InferenceClient
from dotenv import load_dotenv

load_dotenv()
HF_TOKEN = os.getenv("HF_API_TOKEN")

client = InferenceClient(token=HF_TOKEN)

MODEL_ID = "mistralai/Mistral-7B-Instruct-v0.2"

def generate_messages_for_llm(raw_text: str) -> list[dict]:
    # ... (—ç—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤–æ–π –º–æ–¥–µ–ª–∏.
    """
    system_prompt = """
    –¢—ã ‚Äî —ç–ª–∏—Ç–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö —Å–º–µ—Ç.
    –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∏–∑–≤–ª–µ—á—å –∏–∑ —Å—ã—Ä–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ —Å–º–µ—Ç—ã –≤—Å–µ –ø–æ–∑–∏—Ü–∏–∏ (–º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ —Ä–∞–±–æ—Ç—ã)
    –∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –∏—Ö –≤ –≤–∏–¥–µ –°–¢–†–û–ì–û–ì–û JSON-–º–∞—Å—Å–∏–≤–∞.

    –ü—Ä–∞–≤–∏–ª–∞:
    1. –ö–∞–∂–¥–∞—è –ø–æ–∑–∏—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å –ø–æ–ª—è–º–∏: "name", "unit", "quantity", "price_per_unit".
    2. –ï—Å–ª–∏ –∫–∞–∫–æ–µ-—Ç–æ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—Ç–∞–≤—å null.
    3. –ù–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥–∞–Ω–Ω—ã–µ. –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–∑–∏—Ü–∏–µ–π —Å–º–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ä–∞–∑–¥–µ–ª–∞), –∏–≥–Ω–æ—Ä–∏—Ä—É–π –µ–µ.
    4. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¢–û–õ–¨–ö–û JSON-–º–∞—Å—Å–∏–≤–æ–º, –±–µ–∑ –∫–∞–∫–∏—Ö-–ª–∏–±–æ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤ –∏–ª–∏ –ø–æ—è—Å–Ω–µ–Ω–∏–π.
    
    –ü—Ä–∏–º–µ—Ä:
    –í—Ö–æ–¥–Ω–æ–π —Ç–µ–∫—Å—Ç: "1. –ö—Ä–∞—Å–∫–∞ –±–µ–ª–∞—è - 10 –ª - 5000 —Ä—É–±. 2. –ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω - 20 –∫–≤.–º. - 15000 —Ä—É–±."
    –¢–≤–æ–π –∏–¥–µ–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç:
    [
        {
            "name": "–ö—Ä–∞—Å–∫–∞ –±–µ–ª–∞—è",
            "unit": "–ª",
            "quantity": 10,
            "price_per_unit": 500.0
        },
        {
            "name": "–ü–æ–∫—Ä–∞—Å–∫–∞ —Å—Ç–µ–Ω",
            "unit": "–∫–≤.–º.",
            "quantity": 20,
            "price_per_unit": 750.0
        }
    ]
    """
    user_prompt = f"–í–æ—Ç —Ç–µ–∫—Å—Ç —Å–º–µ—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:\n\n---\n{raw_text}\n---"

    messages = [
        {"role": "user", "content": system_prompt + "\n\n" + user_prompt}
    ]
    return messages

def map_text_to_structured_data(raw_text: str) -> list | None:
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å—ã—Ä–æ–π —Ç–µ–∫—Å—Ç –≤ LLM —á–µ—Ä–µ–∑ –¥–∏–∞–ª–æ–≥–æ–≤—ã–π endpoint –∏ –ø–∞—Ä—Å–∏—Ç –æ—Ç–≤–µ—Ç.
    """
    messages = generate_messages_for_llm(raw_text)
    response_content = "" # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
    try:
        print("üí¨ –û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ LLM (–º–µ—Ç–æ–¥ chat_completion)...")
        response_generator = client.chat_completion(
            messages=messages,
            model=MODEL_ID,
            max_tokens=2048,
            temperature=0.1,
        )
        response_content = response_generator.choices[0].message.content
        print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç LLM –ø–æ–ª—É—á–µ–Ω.")
        
        # --- –£–õ–£–ß–®–ï–ù–ù–´–ô –ü–ê–†–°–ò–ù–ì JSON ---
        # –ò—â–µ–º —Å–∞–º—ã–π –±–æ–ª—å—à–æ–π JSON-–º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç –≤ —Ç–µ–∫—Å—Ç–µ
        json_match = re.search(r'\[.*\]|\{.*\}', response_content, re.DOTALL)
        
        if not json_match:
            print("‚ùå –û—à–∏–±–∫–∞: –í –æ—Ç–≤–µ—Ç–µ LLM –Ω–µ –Ω–∞–π–¥–µ–Ω JSON-–º–∞—Å—Å–∏–≤ –∏–ª–∏ –æ–±—ä–µ–∫—Ç.")
            print(f"   –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_content}")
            return None

        json_string = json_match.group(0)
        structured_data = json.loads(json_string)
        # --- –ö–û–ù–ï–¶ –£–õ–£–ß–®–ï–ù–ò–Ø ---
        
        return structured_data
        
    except json.JSONDecodeError:
        print("‚ùå –û—à–∏–±–∫–∞: LLM –≤–µ—Ä–Ω—É–ª–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON.")
        print(f"   –ü–æ–ª—É—á–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {response_content}")
        return None
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM API: {e}")
        return None

# –ö–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞: src/analytics/llm_mapper.py